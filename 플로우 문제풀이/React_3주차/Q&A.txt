1. FLUX 패턴에 대하여 설명해보세요.

    FLUX 패턴은 SPA 제작을 위해 Facebook이 개발한 구조 패턴이다. 이 패턴은 어플리케이션을 stores, dispatcher, views, action (creators)로 나눈다.
    1) stores
        : 어플리케이션의 상태를 관리한다. 도메인 상태와 UI 상태를 모두 저장할 수 있고, context와 reducer 등 전역으로 관리할 상태와 로직이 담긴다.
    2) dispatcher
        : 등록된 stores에 actions/events를 전달하는 역할을 한다.
    3) views
        : UI를 렌더링하고 사용자 상호작용을 다룬다.
    4) action (creators)
        : 해당 로직에 필요한 모든 정보를 담은 객체로, action의 type을 나타내는 type property와 데이터를 담는 payload property를 갖는다.
          
    FLUX는 위의 네 가지 기능을 사용한 단방향 데이터 흐름을 기반으로 구축된다. 
    이러한 단방향 데이터 흐름을 사용하면 각 View에서 실행될 작업을 쉽게 확인할 수 있으므로 데이터 흐름에 대해 쉽게 추론할 수 있고,
    혼동을 방지하므로 프로그램을 개발하고 유지 보수하는 데 도움이 된다.

2. 아래의 hook 함수는 각각 어느 순간에 사용할까요?
    (1) useReducer
        - 컴포넌트의 상태 업데이트 로직을 컴포넌트에서 분리시켜 컴포넌트의 외부에 작성하는 것을 가능하게 함으로써, 코드의 최적화가 필요할 때
        - 관리해야 할 state가 복수일 경우 또는 현재는 단일 state 값을 관리하지만 추후 유동적으로 추가될 가능성이 있는 경우
        - 스케일이 큰 프로젝트, state의 구조가 복잡해질 것으로 보이는 경우
    (2) useContext
        - 부모에서 자식으로, 그 자식에서 또 다른 자식으로 props를 계속 넘겨주어야 하는 props drilling이 발생할 때
        - 위와 같이 props를 넘겨 받을 컴포넌트가 많아져서 하나를 수정할 경우 일일이 모든 컴포넌트를 수정해주어야 할 때

3. 전역 상태 관리를 해야하는 이유는 무엇일까요?
    전역상태관리는 애플리케이션에서 데이터를 중앙집중화해 관리함으로써 재사용 가능하고 모든 컴포넌트에서 접근 가능하게 만드는 것을 의미한다.
    어플리케이션의 규모가 커지면, props-drilling의 사례처럼 컴포넌트 간 공유되는 state를 관리하는 것이 복잡해지고 어려워진다.
    이럴 때 전역 상태 관리를 해줌으로써 앱의 로직을 더 쉽게 추론할 수 있고 데이터가 어느 위치에서 왔는지 확인하기 쉬워진다.

4. 그렇다면 전역 상태 관리는 위 조건에만 부합하면 반드시 수행하는 것이 좋을까요?
   전역 상태 관리를 통해 얻을 수 있는 장단점에 관하여 토의해보세요.
    1) 장점
        a. 데이터를 중심에 모아서 어플리케이션의 모든 컴포넌트에서 쉽게 접근할 수 있게 한다.
        b. 컴포넌트 간 복잡하게 공유되던 상태들을 하나로 분리하여 관리함으로써 로직을 더 쉽게 추론하고 데이터의 위치를 더 쉽게 파악할 수 있다.
    2) 단점
        : 전역 상태는 프로그램의 상태를 예측하기 어렵게 만들 수 있다. 
          한 메소드가 부수효과로 공유된 전역 상태의 값을 변화시키면, 다른 컴포넌트의 메소드를 실행할 때 시작 상태 값이 무엇인지 파악하기 어렵다.